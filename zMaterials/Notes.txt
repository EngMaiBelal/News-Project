_________________________________________________________________________
1- Database
____________________
    A- Migration
        php make artisan make:model Admin -m (migration and model)
        1- User Migration:
            id();
            string('name');
            string('user_name');
            string('email')->unique();
            string('phone')->unique();
            timestamp('email_verified_at')->nullable();
            string('password');
            string('image')->default('default.png');
            boolean('status')->default(1);
            string('street')->default('default);
            string('city')->default('default);
            string('country')->default('default);
            rememberToken();
            timestamps();
        2- Admin Migration:
            id();
            string('name');
            string('user_name');
            string('password');
            string('email')->unique();
            string('role_id');
            timestamps();
        3-Category Migration:
            id();
            string('name');
            boolean('status')->default(1);
            string('slug');
            timestamps();
        4- Post Migration:
            id();
            string('title');
            longText('description');
            boolean('comment_able')->default(1);
            boolean('status')->default(1);
            string('slug');
            foreignId('user_id')->constrained('users')->onDelete('cascade')->onUpdate('cascade');
            foreignId('category_id')->references('id')->on('categories')->onDelete('cascade')->onUpdate('cascade');
            timestamps();
        5- Image Post Migration:
            id();
            string('path');
            foreignId('post_id')->constrained('posts')->onDelete('cascade');
            timestamps();
        4- Contacts Migration:
            id();
            string('phone');
            string('name');
            string('email');
            string('title');
            text('body');
            string('ip_address');
            timestamps();
        5- Setting Migration:
            id();
            string('site_name');
            string('email');
            string('phone')->unique();
            string('favicon');
            string('logo');
            string('facebook');
            string('twitter');
            string('youtube');
            string('city');
            string('country');
            string('street');
            timestamps();
        6- Comments Migration:
            id();
            string('value');
            string('ip_address');
            boolean('status')->default(1);
            foreignId('post_id')->constrained('posts')->onDelete('cascade')->onUpdate('cascade');
            foreignId('user_id')->constrained('users')->onDelete('cascade')->onUpdate('cascade');
            timestamps();

    B- Relations and Models
        1- Admin
            - use HasFactory;
            - protected $fillable = ['name', 'user_name', 'password', 'email', 'role_id'];
        2- Category
            - use HasFactory;
            - protected $fillable = ['name', 'status', 'slug'];
            - public function posts()
                return $this->hasMany(Post::class, 'category_id')
        3- Post
            - use Sluggable, HasFactory;
            - protected $fillable = ['title', 'description', 'comment_able', 'status',
                                    'slug', 'user_id', 'category_id'];

            - public function sluggable(): array
                return ['slug' => [ 'source' => 'title' ] ];

            - public function category()
                return $this->belongsTo(Category::class, 'category_id');
            
            - public function user()
                return $this->belongsTo(User::class, 'user_id');
            
            - public function comments()
                return $this->hasMany(Comment::class, 'post_id');
            
            - public function imagePosts()
                return $this->hasMany(ImagePost::class, 'post_id');
        4- User 
            - use HasFactory, Notifiable;
            - protected $fillable = ['name', 'email', 'password', 'user_name','phone',
                                    'image', 'status', 'street', 'city','country'];

            - public function posts()
                return $this->hasMany(Post::class, 'user_id');
            - public function comments()
                return $this->hasMany(Comment::class, 'user_id');

        5- Contact
            - use HasFactory;
            - $fillable = ['phone', 'name', 'email', 'title', 'body', 'ip_address'];
        
        6- Comment
            - protected $fillable = [
                    'value',
                    'ip_address',
                    'status',
                    'post_id',
                    'user_id'
                ];

            - post()
                return $this->belongsTo(Post::class, 'post_id');

            - user()
                return $this->belongsTo(User::class, 'user_id');

    C- Factory And Seeder --> Create seeder and factory to category, contact, post, and user.
        1- Category Seeder  --> I donot make CategoryFactory

            $data = ['Mobile Category', 'Sports Category', 'Fashion Category'];
            $date = fake()->date('Y-m-d h:m:s');
            foreach($data as $category){
                Category::create([
                    "name" => $item,
                    "slug" => str::slug($item), 
                    "status" => rand(0,1),
                    "created_at" => $date,
                    "updated_at" => $date,
                ]);
            };
        
        Note:-
        _______
            -Defination:-
                - A slug is a simplified version of a string, typically URL-friendly (especially for SEO).
                - The act of "slugging" a string usually involves converting it to one case,
                    and removing any non-URL-friendly characters 
                    (spaces, accented Subscribers, ampersands, etc.).
                - The resulting string can then be used as an identifier for a particular resource.
                - It's readable, easier to type.
                - Slugs tend to be unique as well
                - From ( http://example.com/post/2) or (http://example.com/post/My+Dinner+With+Andr%C3%A9+%26+Fran%C3%A7ois)
                
                to (http://example.com/post/my-dinner-with-andre-francois)
                    (http://example.com/post/my-dinner-with-andre-francois-1)
                    (http://example.com/post/my-dinner-with-andre-francois-2)

            - How can we use it?
                1- Built in laravel
                    str::slug($item) --> هتأخد الاسم وتشيل المسافات وأي  special character وهتحط -
                                        ودي حاجه موجوده في لارفيل مش محتاج تنزلها 
                                        use Illuminate\Support\Str;

                2- External package
                    1- https://github.com/spatie/laravel-sluggable
                    2- https://github.com/cviebrock/eloquent-sluggable
                        - Install it 
                        - Use it in post model
                            - use Sluggable;
                            - function sluggable(): array
                                return ['slug' => ['source' => 'title']];

        2- PostFactory
                $date = fake()->date('Y-m-d h:m:s');
                return [
                    'title' => fake()->sentence(3),
                    'description' => fake()->paragraph(5),
                    'comment_able' => rand(0,1),
                    'status' => rand(0,1),
                    'user_id' => User::inRandomOrder()->first()->id,
                    'category_id' => Category::inRandomOrder()->first()->id,
                    'created_at' => $date,
                    'updated_at' => $date
                ];
                - ال slug خلاص هيتعمل في الباكدج
                - User::inRandomOrder()->first()->id --> selects a random user from the users table 
                                                        and returns the id of that user.
        
        3- Comment
            - CommentFactory
                return [
                    'value' => fake()->paragraph(2),
                    'ip_address' => fake()->ipv4(),
                    'status' => rand(0,1),
                    'post_id' => Post::inRandomOrder()->first()->id,
                    'user_id' => User::inRandomOrder()->first()->id,
                ];
            - CommentSeeder
                Comment::factory()->count(200)->create();
        
        4- ImagePostFactory
                return [
                    'path' => fake()->imageUrl(),
                    // 'post_id' => Post::inRandomOrder()->first()->id,
                ];
                - هنا هتظهر مشكله انه مش كل البوستات هيكون ليها صوره 
                - وانا عاوز اكون متاكد ان لكل بوست صوره 
                - بمعني لو عملت 50 صورة هيروح يختار 50 بوست ليهم بشكل عشوائي 
                - حتي لو عامل 100 بوست
                - الحل هنلغي السطر الخاص ب post id
                - وهروح وانا بعمل PostSeeder 
                - احدد الصور هناك

        5- PostSeeder
            - run()
                $post = Post::factory()->count(50)->create();
                $post->each(function($post){
                    ImagePost::factory(2)->create([
                        'post_id'=> $post->id,
                    ]);
            });
        
        6- Contact   
            - ContactFactory
                return [
                    'name'=> fake()->name(),
                    'email'=> fake()->email(),
                    'phone'=> fake()->phoneNumber(),
                    'title'=> fake()->title(),
                    'body'=> fake()->paragraph(2),
                    'ip_address'=> fake()->ipv4()
                ];
            - ContactSeeder
                Contact::factory()->count(30)->create();

        7- AdminSeeder
            - run()
            Admin::create([
                'name' => 'admin',
                'email' => 'admin@gmail.com',
                'username' => 'admin',
                'password' => bcrypt('admin')
            ]);

        8- DatabaseSeeder
            - run()
                $this->call([
                    AdminSeeder::class,
                    UserSeeder::class,
                    CategorySeeder::class,
                    PostSeeder::class,
                    CommentSeeder::class,
                    ContactSeeder::class,
                ]);

        9- Setting
            - shared seeting أنا عاوز أعمل 
            - أول ما البروجكت يشتغل 
            - يروح يدور في سيتنج والا لو في خلاص مفيش يروح يعملها
            - php artisan make:provider CheckSettingProvider
            - bootstrap/providers.php  هيضاف  هنا علي طول اتوماتيك
                return [ App\Providers\CheckSettingProvider::class ];
            - CheckSettingProvider
                - هتروح تجيب أول صف في السيتنج إللي هي أصلا صف واحد
                - boot(): void
                    Setting::firstOr(function(){
                        return Setting::create([
                            'site_name' => 'News',
                            'email' => 'mai.belal2127@gmail.com',
                            'phone' => '01019063522',
                            'favicon' => 'default',
                            'logo' => 'default',
                            'facebook' => 'default',
                            'twitter' => 'default',
                            'youtube' => 'default',
                            'city' => 'default',
                            'country' => 'default',
                            'street' => 'default'
                        ]);
                    });
            - Setting Model
                - $fillable = ['site_name','email','phone','favicon','logo','facebook',
                            'twitter','youtube','city','country','street'];

______________________________________________________________________________________
2- Layout
____________________
    - public/assets/frontend/ css, img, js, and lib.
    - Layout Inheritanceeeeeeeeeee Blade
        - resources/views
            - views/backend
            - views/frontend/index.blade.php
                @extends('layouts.frontend.app')
                @section('header')
                    @include('layouts.frontend.header')
                @endsection
                @section('content)
                .......
                @endsection
                @section('footer')
                    @include('layouts.frontend.footer')
                @endsection

            - {{ asset("assets/frontend/img/news-450x350-2.jpg") }}
                لملفات ال js, css, jpg
        - resources/views/layouts
            - layouts/dashboard
            - layouts/frontend/app.blade.php
                <!doctype html>
                <html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
                <head>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1">

                    <!-- CSRF Token -->
                    <meta name="csrf-token" content="{{ csrf_token() }}">

                    <title>{{ config('app.name', 'News') }}</title>

                    <!-- Fonts -->
                    <link rel="dns-prefetch" href="//fonts.bunny.net">
                    <link href="https://fonts.bunny.net/css?family=Nunito" rel="stylesheet">
                    
                    <!-- Favicon -->
                    {{-- <link href={{ asset('assets/frontend/img/favicon.ico') }} rel="icon" /> --}}
                    <link href={{ Storage::url('images/' . $settings->favicon) }} rel="icon" />

                    <!-- Google Fonts -->
                    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,600&display=swap" rel="stylesheet" />

                    <!-- CSS Libraries -->
                    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet" />
                    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet" />
                    <link href={{asset('assets/frontend/lib/slick/slick.css') }} rel="stylesheet" />
                    <link href={{asset('assets/frontend/lib/slick/slick-theme.css') }} rel="stylesheet" />

                    <!-- Template Stylesheet -->
                    <link href={{asset('assets/frontend/css/style.css')}} rel="stylesheet" />

                    @yield('css')
                </head>
                <body>
                        # some content .........
                    @yield('header')
                        # some content .........
                    @yield('footer')
                    @yield('js')
                </body>
                </html>
            - مشكله النافبار الدروبدون
                <!-- Scripts -->
                {{-- @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
                    @vite(['resources/css/app.css', 'resources/js/app.js'])
                @else
                    <style>
                        /* ! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */
                        *,
                        ::after,
                        ::before {
                            box-sizing: border-box;
                            border-width: 0;
                            border-style: solid;
                            border-color: #e5e7eb
                        }

                        ::after,
                        ::before {
                            --tw-content: ''
                        }

                        :host,
                        html {
                            line-height: 1.5;
                            -webkit-text-size-adjust: 100%;
                            -moz-tab-size: 4;
                            tab-size: 4;
                            font-family: Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
                            font-feature-settings: normal;
                            font-variation-settings: normal;
                            -webkit-tap-highlight-color: transparent
                        }

                        body {
                            margin: 0;
                            line-height: inherit
                        }

                        hr {
                            height: 0;
                            color: inherit;
                            border-top-width: 1px
                        }

                        abbr:where([title]) {
                            -webkit-text-decoration: underline dotted;
                            text-decoration: underline dotted
                        }

                        h1,
                        h2,
                        h3,
                        h4,
                        h5,
                        h6 {
                            font-size: inherit;
                            font-weight: inherit
                        }

                        a {
                            color: inherit;
                            text-decoration: inherit
                        }

                        b,
                        strong {
                            font-weight: bolder
                        }

                        code,
                        kbd,
                        pre,
                        samp {
                            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
                            font-feature-settings: normal;
                            font-variation-settings: normal;
                            font-size: 1em
                        }

                        small {
                            font-size: 80%
                        }

                        sub,
                        sup {
                            font-size: 75%;
                            line-height: 0;
                            position: relative;
                            vertical-align: baseline
                        }

                        sub {
                            bottom: -.25em
                        }

                        sup {
                            top: -.5em
                        }

                        table {
                            text-indent: 0;
                            border-color: inherit;
                            border-collapse: collapse
                        }

                        button,
                        input,
                        optgroup,
                        select,
                        textarea {
                            font-family: inherit;
                            font-feature-settings: inherit;
                            font-variation-settings: inherit;
                            font-size: 100%;
                            font-weight: inherit;
                            line-height: inherit;
                            color: inherit;
                            margin: 0;
                            padding: 0
                        }

                        button,
                        select {
                            text-transform: none
                        }

                        [type=button],
                        [type=reset],
                        [type=submit],
                        button {
                            -webkit-appearance: button;
                            background-color: transparent;
                            background-image: none
                        }

                        :-moz-focusring {
                            outline: auto
                        }

                        :-moz-ui-invalid {
                            box-shadow: none
                        }

                        progress {
                            vertical-align: baseline
                        }

                        ::-webkit-inner-spin-button,
                        ::-webkit-outer-spin-button {
                            height: auto
                        }

                        [type=search] {
                            -webkit-appearance: textfield;
                            outline-offset: -2px
                        }

                        ::-webkit-search-decoration {
                            -webkit-appearance: none
                        }

                        ::-webkit-file-upload-button {
                            -webkit-appearance: button;
                            font: inherit
                        }

                        summary {
                            display: list-item
                        }

                        blockquote,
                        dd,
                        dl,
                        figure,
                        h1,
                        h2,
                        h3,
                        h4,
                        h5,
                        h6,
                        hr,
                        p,
                        pre {
                            margin: 0
                        }

                        fieldset {
                            margin: 0;
                            padding: 0
                        }

                        legend {
                            padding: 0
                        }

                        menu,
                        ol,
                        ul {
                            list-style: none;
                            margin: 0;
                            padding: 0
                        }

                        dialog {
                            padding: 0
                        }

                        textarea {
                            resize: vertical
                        }

                        input::placeholder,
                        textarea::placeholder {
                            opacity: 1;
                            color: #9ca3af
                        }

                        [role=button],
                        button {
                            cursor: pointer
                        }

                        :disabled {
                            cursor: default
                        }

                        audio,
                        canvas,
                        embed,
                        iframe,
                        img,
                        object,
                        svg,
                        video {
                            display: block;
                            vertical-align: middle
                        }

                        img,
                        video {
                            max-width: 100%;
                            height: auto
                        }

                        [hidden] {
                            display: none
                        }

                        *,
                        ::before,
                        ::after {
                            --tw-border-spacing-x: 0;
                            --tw-border-spacing-y: 0;
                            --tw-translate-x: 0;
                            --tw-translate-y: 0;
                            --tw-rotate: 0;
                            --tw-skew-x: 0;
                            --tw-skew-y: 0;
                            --tw-scale-x: 1;
                            --tw-scale-y: 1;
                            --tw-pan-x: ;
                            --tw-pan-y: ;
                            --tw-pinch-zoom: ;
                            --tw-scroll-snap-strictness: proximity;
                            --tw-gradient-from-position: ;
                            --tw-gradient-via-position: ;
                            --tw-gradient-to-position: ;
                            --tw-ordinal: ;
                            --tw-slashed-zero: ;
                            --tw-numeric-figure: ;
                            --tw-numeric-spacing: ;
                            --tw-numeric-fraction: ;
                            --tw-ring-inset: ;
                            --tw-ring-offset-width: 0px;
                            --tw-ring-offset-color: #fff;
                            --tw-ring-color: rgb(59 130 246 / 0.5);
                            --tw-ring-offset-shadow: 0 0 #0000;
                            --tw-ring-shadow: 0 0 #0000;
                            --tw-shadow: 0 0 #0000;
                            --tw-shadow-colored: 0 0 #0000;
                            --tw-blur: ;
                            --tw-brightness: ;
                            --tw-contrast: ;
                            --tw-grayscale: ;
                            --tw-hue-rotate: ;
                            --tw-invert: ;
                            --tw-saturate: ;
                            --tw-sepia: ;
                            --tw-drop-shadow: ;
                            --tw-backdrop-blur: ;
                            --tw-backdrop-brightness: ;
                            --tw-backdrop-contrast: ;
                            --tw-backdrop-grayscale: ;
                            --tw-backdrop-hue-rotate: ;
                            --tw-backdrop-invert: ;
                            --tw-backdrop-opacity: ;
                            --tw-backdrop-saturate: ;
                            --tw-backdrop-sepia:
                        }

                        ::backdrop {
                            --tw-border-spacing-x: 0;
                            --tw-border-spacing-y: 0;
                            --tw-translate-x: 0;
                            --tw-translate-y: 0;
                            --tw-rotate: 0;
                            --tw-skew-x: 0;
                            --tw-skew-y: 0;
                            --tw-scale-x: 1;
                            --tw-scale-y: 1;
                            --tw-pan-x: ;
                            --tw-pan-y: ;
                            --tw-pinch-zoom: ;
                            --tw-scroll-snap-strictness: proximity;
                            --tw-gradient-from-position: ;
                            --tw-gradient-via-position: ;
                            --tw-gradient-to-position: ;
                            --tw-ordinal: ;
                            --tw-slashed-zero: ;
                            --tw-numeric-figure: ;
                            --tw-numeric-spacing: ;
                            --tw-numeric-fraction: ;
                            --tw-ring-inset: ;
                            --tw-ring-offset-width: 0px;
                            --tw-ring-offset-color: #fff;
                            --tw-ring-color: rgb(59 130 246 / 0.5);
                            --tw-ring-offset-shadow: 0 0 #0000;
                            --tw-ring-shadow: 0 0 #0000;
                            --tw-shadow: 0 0 #0000;
                            --tw-shadow-colored: 0 0 #0000;
                            --tw-blur: ;
                            --tw-brightness: ;
                            --tw-contrast: ;
                            --tw-grayscale: ;
                            --tw-hue-rotate: ;
                            --tw-invert: ;
                            --tw-saturate: ;
                            --tw-sepia: ;
                            --tw-drop-shadow: ;
                            --tw-backdrop-blur: ;
                            --tw-backdrop-brightness: ;
                            --tw-backdrop-contrast: ;
                            --tw-backdrop-grayscale: ;
                            --tw-backdrop-hue-rotate: ;
                            --tw-backdrop-invert: ;
                            --tw-backdrop-opacity: ;
                            --tw-backdrop-saturate: ;
                            --tw-backdrop-sepia:
                        }

                        .absolute {
                            position: absolute
                        }

                        .relative {
                            position: relative
                        }

                        .-left-20 {
                            left: -5rem
                        }

                        .top-0 {
                            top: 0px
                        }

                        .-bottom-16 {
                            bottom: -4rem
                        }

                        .-left-16 {
                            left: -4rem
                        }

                        .-mx-3 {
                            margin-left: -0.75rem;
                            margin-right: -0.75rem
                        }

                        .mt-4 {
                            margin-top: 1rem
                        }

                        .mt-6 {
                            margin-top: 1.5rem
                        }

                        .flex {
                            display: flex
                        }

                        .grid {
                            display: grid
                        }

                        .hidden {
                            display: none
                        }

                        .aspect-video {
                            aspect-ratio: 16 / 9
                        }

                        .size-12 {
                            width: 3rem;
                            height: 3rem
                        }

                        .size-5 {
                            width: 1.25rem;
                            height: 1.25rem
                        }

                        .size-6 {
                            width: 1.5rem;
                            height: 1.5rem
                        }

                        .h-12 {
                            height: 3rem
                        }

                        .h-40 {
                            height: 10rem
                        }

                        .h-full {
                            height: 100%
                        }

                        .min-h-screen {
                            min-height: 100vh
                        }

                        .w-full {
                            width: 100%
                        }

                        .w-\[calc\(100\%\+8rem\)\] {
                            width: calc(100% + 8rem)
                        }

                        .w-auto {
                            width: auto
                        }

                        .max-w-\[877px\] {
                            max-width: 877px
                        }

                        .max-w-2xl {
                            max-width: 42rem
                        }

                        .flex-1 {
                            flex: 1 1 0%
                        }

                        .shrink-0 {
                            flex-shrink: 0
                        }

                        .grid-cols-2 {
                            grid-template-columns: repeat(2, minmax(0, 1fr))
                        }

                        .flex-col {
                            flex-direction: column
                        }

                        .items-start {
                            align-items: flex-start
                        }

                        .items-center {
                            align-items: center
                        }

                        .items-stretch {
                            align-items: stretch
                        }

                        .justify-end {
                            justify-content: flex-end
                        }

                        .justify-center {
                            justify-content: center
                        }

                        .gap-2 {
                            gap: 0.5rem
                        }

                        .gap-4 {
                            gap: 1rem
                        }

                        .gap-6 {
                            gap: 1.5rem
                        }

                        .self-center {
                            align-self: center
                        }

                        .overflow-hidden {
                            overflow: hidden
                        }

                        .rounded-\[10px\] {
                            border-radius: 10px
                        }

                        .rounded-full {
                            border-radius: 9999px
                        }

                        .rounded-lg {
                            border-radius: 0.5rem
                        }

                        .rounded-md {
                            border-radius: 0.375rem
                        }

                        .rounded-sm {
                            border-radius: 0.125rem
                        }

                        .bg-\[\#FF2D20\]\/10 {
                            background-color: rgb(255 45 32 / 0.1)
                        }

                        .bg-white {
                            --tw-bg-opacity: 1;
                            background-color: rgb(255 255 255 / var(--tw-bg-opacity))
                        }

                        .bg-gradient-to-b {
                            background-image: linear-gradient(to bottom, var(--tw-gradient-stops))
                        }

                        .from-transparent {
                            --tw-gradient-from: transparent var(--tw-gradient-from-position);
                            --tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position);
                            --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to)
                        }

                        .via-white {
                            --tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position);
                            --tw-gradient-stops: var(--tw-gradient-from), #fff var(--tw-gradient-via-position), var(--tw-gradient-to)
                        }

                        .to-white {
                            --tw-gradient-to: #fff var(--tw-gradient-to-position)
                        }

                        .stroke-\[\#FF2D20\] {
                            stroke: #FF2D20
                        }

                        .object-cover {
                            object-fit: cover
                        }

                        .object-top {
                            object-position: top
                        }

                        .p-6 {
                            padding: 1.5rem
                        }

                        .px-6 {
                            padding-left: 1.5rem;
                            padding-right: 1.5rem
                        }

                        .py-10 {
                            padding-top: 2.5rem;
                            padding-bottom: 2.5rem
                        }

                        .px-3 {
                            padding-left: 0.75rem;
                            padding-right: 0.75rem
                        }

                        .py-16 {
                            padding-top: 4rem;
                            padding-bottom: 4rem
                        }

                        .py-2 {
                            padding-top: 0.5rem;
                            padding-bottom: 0.5rem
                        }

                        .pt-3 {
                            padding-top: 0.75rem
                        }

                        .text-center {
                            text-align: center
                        }

                        .font-sans {
                            font-family: Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji
                        }

                        .text-sm {
                            font-size: 0.875rem;
                            line-height: 1.25rem
                        }

                        .text-sm\/relaxed {
                            font-size: 0.875rem;
                            line-height: 1.625
                        }

                        .text-xl {
                            font-size: 1.25rem;
                            line-height: 1.75rem
                        }

                        .font-semibold {
                            font-weight: 600
                        }

                        .text-black {
                            --tw-text-opacity: 1;
                            color: rgb(0 0 0 / var(--tw-text-opacity))
                        }

                        .text-white {
                            --tw-text-opacity: 1;
                            color: rgb(255 255 255 / var(--tw-text-opacity))
                        }

                        .underline {
                            -webkit-text-decoration-line: underline;
                            text-decoration-line: underline
                        }

                        .antialiased {
                            -webkit-font-smoothing: antialiased;
                            -moz-osx-font-smoothing: grayscale
                        }

                        .shadow-\[0px_14px_34px_0px_rgba\(0\2c 0\2c 0\2c 0\.08\)\] {
                            --tw-shadow: 0px 14px 34px 0px rgba(0, 0, 0, 0.08);
                            --tw-shadow-colored: 0px 14px 34px 0px var(--tw-shadow-color);
                            box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)
                        }

                        .ring-1 {
                            --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
                            --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
                            box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)
                        }

                        .ring-transparent {
                            --tw-ring-color: transparent
                        }

                        .ring-white\/\[0\.05\] {
                            --tw-ring-color: rgb(255 255 255 / 0.05)
                        }

                        .drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.06\)\] {
                            --tw-drop-shadow: drop-shadow(0px 4px 34px rgba(0, 0, 0, 0.06));
                            filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)
                        }

                        .drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.25\)\] {
                            --tw-drop-shadow: drop-shadow(0px 4px 34px rgba(0, 0, 0, 0.25));
                            filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)
                        }

                        .transition {
                            transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;
                            transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
                            transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;
                            transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
                            transition-duration: 150ms
                        }

                        .duration-300 {
                            transition-duration: 300ms
                        }

                        .selection\:bg-\[\#FF2D20\] *::selection {
                            --tw-bg-opacity: 1;
                            background-color: rgb(255 45 32 / var(--tw-bg-opacity))
                        }

                        .selection\:text-white *::selection {
                            --tw-text-opacity: 1;
                            color: rgb(255 255 255 / var(--tw-text-opacity))
                        }

                        .selection\:bg-\[\#FF2D20\]::selection {
                            --tw-bg-opacity: 1;
                            background-color: rgb(255 45 32 / var(--tw-bg-opacity))
                        }

                        .selection\:text-white::selection {
                            --tw-text-opacity: 1;
                            color: rgb(255 255 255 / var(--tw-text-opacity))
                        }

                        .hover\:text-black:hover {
                            --tw-text-opacity: 1;
                            color: rgb(0 0 0 / var(--tw-text-opacity))
                        }

                        .hover\:text-black\/70:hover {
                            color: rgb(0 0 0 / 0.7)
                        }

                        .hover\:ring-black\/20:hover {
                            --tw-ring-color: rgb(0 0 0 / 0.2)
                        }

                        .focus\:outline-none:focus {
                            outline: 2px solid transparent;
                            outline-offset: 2px
                        }

                        .focus-visible\:ring-1:focus-visible {
                            --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
                            --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
                            box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)
                        }

                        .focus-visible\:ring-\[\#FF2D20\]:focus-visible {
                            --tw-ring-opacity: 1;
                            --tw-ring-color: rgb(255 45 32 / var(--tw-ring-opacity))
                        }

                        @media (min-width: 640px) {
                            .sm\:size-16 {
                                width: 4rem;
                                height: 4rem
                            }

                            .sm\:size-6 {
                                width: 1.5rem;
                                height: 1.5rem
                            }

                            .sm\:pt-5 {
                                padding-top: 1.25rem
                            }
                        }

                        @media (min-width: 768px) {
                            .md\:row-span-3 {
                                grid-row: span 3 / span 3
                            }
                        }

                        @media (min-width: 1024px) {
                            .lg\:col-start-2 {
                                grid-column-start: 2
                            }

                            .lg\:h-16 {
                                height: 4rem
                            }

                            .lg\:max-w-7xl {
                                max-width: 80rem
                            }

                            .lg\:grid-cols-3 {
                                grid-template-columns: repeat(3, minmax(0, 1fr))
                            }

                            .lg\:grid-cols-2 {
                                grid-template-columns: repeat(2, minmax(0, 1fr))
                            }

                            .lg\:flex-col {
                                flex-direction: column
                            }

                            .lg\:items-end {
                                align-items: flex-end
                            }

                            .lg\:justify-center {
                                justify-content: center
                            }

                            .lg\:gap-8 {
                                gap: 2rem
                            }

                            .lg\:p-10 {
                                padding: 2.5rem
                            }

                            .lg\:pb-10 {
                                padding-bottom: 2.5rem
                            }

                            .lg\:pt-0 {
                                padding-top: 0px
                            }

                            .lg\:text-\[\#FF2D20\] {
                                --tw-text-opacity: 1;
                                color: rgb(255 45 32 / var(--tw-text-opacity))
                            }
                        }

                        @media (prefers-color-scheme: dark) {
                            .dark\:block {
                                display: block
                            }

                            .dark\:hidden {
                                display: none
                            }

                            .dark\:bg-black {
                                --tw-bg-opacity: 1;
                                background-color: rgb(0 0 0 / var(--tw-bg-opacity))
                            }

                            .dark\:bg-zinc-900 {
                                --tw-bg-opacity: 1;
                                background-color: rgb(24 24 27 / var(--tw-bg-opacity))
                            }

                            .dark\:via-zinc-900 {
                                --tw-gradient-to: rgb(24 24 27 / 0) var(--tw-gradient-to-position);
                                --tw-gradient-stops: var(--tw-gradient-from), #18181b var(--tw-gradient-via-position), var(--tw-gradient-to)
                            }

                            .dark\:to-zinc-900 {
                                --tw-gradient-to: #18181b var(--tw-gradient-to-position)
                            }

                            .dark\:text-white\/50 {
                                color: rgb(255 255 255 / 0.5)
                            }

                            .dark\:text-white {
                                --tw-text-opacity: 1;
                                color: rgb(255 255 255 / var(--tw-text-opacity))
                            }

                            .dark\:text-white\/70 {
                                color: rgb(255 255 255 / 0.7)
                            }

                            .dark\:ring-zinc-800 {
                                --tw-ring-opacity: 1;
                                --tw-ring-color: rgb(39 39 42 / var(--tw-ring-opacity))
                            }

                            .dark\:hover\:text-white:hover {
                                --tw-text-opacity: 1;
                                color: rgb(255 255 255 / var(--tw-text-opacity))
                            }

                            .dark\:hover\:text-white\/70:hover {
                                color: rgb(255 255 255 / 0.7)
                            }

                            .dark\:hover\:text-white\/80:hover {
                                color: rgb(255 255 255 / 0.8)
                            }

                            .dark\:hover\:ring-zinc-700:hover {
                                --tw-ring-opacity: 1;
                                --tw-ring-color: rgb(63 63 70 / var(--tw-ring-opacity))
                            }

                            .dark\:focus-visible\:ring-\[\#FF2D20\]:focus-visible {
                                --tw-ring-opacity: 1;
                                --tw-ring-color: rgb(255 45 32 / var(--tw-ring-opacity))
                            }

                            .dark\:focus-visible\:ring-white:focus-visible {
                                --tw-ring-opacity: 1;
                                --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity))
                            }
                        }
                    </style>
                @endif --}}
______________________________________________________________________________________
Index Page
____________________
all posts
____________________

1-  php artisan storage:link --> Make sure the images are stored in the storage/app/public/images/ folder, and the symbolic link is set up correctly by running the following command:
2-  In imagePosts Model --> add name field to fillable array
    In ImagePostFactory         
        $directoryUrl = Storage::url('images/');
        $imageName = uniqid() .'.jpg';
        return [ 'path' => $directoryUrl .'/'. $imageName,
                 'name' => $imageName ]
    In migration add
            $table->string('name')->default('default.png');
    ____________________________________________________________________
    ملحوظه للصور
    ____________________________________________________________________
    1- From placeholder
        In ImagePostFactory
            $imageName = uniqid() .'.jpg';
                return [
                    'name' => $imageName,
                    'path' => 'https://placehold.co/450x350',]
        In Home view
            <img src={{ $post->imagePosts()->first()->path}} />

    2- From storage
        In ImagePostFactory
            $directoryUrl = Storage::url('images/');
            $imageName = uniqid() .'.jpg';
                return [
                    'name' => $imageName,
                    'path' => $directoryUrl .'/'. $imageName,]
        In Home view
            <img src={{ Storage::url('images/' . $post->imagePosts()->first()->name) }} alt="Post Image" height="175px" width="160px"/>
    ____________________________________________________________________

3- HomeController extends Controller
    - public function index()
        - // $posts = Post::with('imagePosts')->limit(9)->get(); لو انت عاوز ليميت بس

        - $posts = Post::with('imagePosts')->paginate(9);
            - https://laravel.com/docs/11.x/pagination
            - dd($posts); اللي راجع متغير في معلومات عن ال paginate
            - #perPage: 9, #currentPage: 1, #path: "http://127.0.0.1:8000", #total: 50, #lastPage: 6
            
        - return view('frontend.index', compact('posts'));
            
4- Index View 
    <!-- Main News Start-->
        <div class="main-news">
            <div class="container">
                <div class="row">
                    <div class="col-lg-9">
                        <div class="row">
                            {{-- // all posts --}}
                            @foreach ($posts as $post) 
                                <div class="col-md-4">
                                    <div class="mn-img">
                                        <img src="{{ $post->imagePosts->first()->path}}" />
                                        {{-- <img src="{{ Storage::url('images/' . $post->imagePosts->first()->name)}}" /> --}}
                                        <div class="mn-title">
                                            <a href="">Lorem ipsum dolor sit</a>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                            {{$posts->links()}}
                        </div>
                    </div>

                
                </div>
            </div>
        </div>
    <!-- Main News End-->

    - {{ $posts->links() }} هتظهر في الفيو ولكن متلخبطه
        - لانه مستخدم البوتستراب فيرزن مختلف
        - app\Providers\AppServiceProvider.php الحل
        - use Illuminate\Pagination\Paginator;
        - public function boot(): void { Paginator::useBootstrap();}
____________________
MostRecent
____________________
    - HomeController
        $posts = Post::with('imagePosts')->paginate(9);
        $latest_three_posts = post::latest()->take(3); كده عندي اتنين كويري

        $posts = Post::with('imagePosts')->latest()->paginate(9); هنعدل هنا وبس 

    - Home view
        @php
            $posts_slider = $posts->take(4);
        @endphp
        @foreach ($posts_slider as $post) 
            <div class="col-md-12">
                <div class="tn-img">
                    <div class="row">
                        <div class="col-md-12 pb-2" >
                            {{-- <img src={{ Storage::url('images/' . $post->imagePosts()->first()->name) }} alt="Post Image" height="175px" width="160px"/> --}}
                            <img src={{ $post->imagePosts()->first()->path}} />
                            {{-- <img src="{{ asset('storage/' . $post->imagePosts()->first()->path) }}" alt=""> --}}
                        </div>
                    </div>
                        <div class="tn-title">
                            <a href="">{{ $post->title }}</a>
                        </div>
                    </div>
            </div>
        @endforeach




____________________
MostViews
____________________
1- add column to posts table migration
    - php artisan make:migration add_column_views_num_to_posts_table
        - up()
            $table->bigInteger('views_num')->nullable()->default(0)->after('slug');
        - down()
                $table->dropColumn('views_num');
    - PostFactory
        'views_num' =>rand(0,10)
    - php artisan mi:f
    - php artisan db:seed
2- HomeController
    - index()
        $posts = Post::with('imagePosts')->latest()->paginate(9);
        $most_views = Post::orderBy('views_num', 'desc')->with('imagePosts')->limit(3)->get();
        return view('frontend.index', compact('posts', 'most_views'));
3- Index blade
     @foreach ( $most_views as $post)
        <div class="tn-news">
            <div class="tn-img">
                <img src="{{ $post->imagePosts->first()->path }}" />
            </div>
            <div class="tn-title">
                <a href="">{{ $post->title }}</a>
            </div>
        </div>
    @endforeach

____________________
OldestNews
____________________
1- HomeController
    - index()
        $oldest_news = Post::oldest()->with('imagePosts')->take(3)->get();

2- Index blade
     @foreach ( $oldest_news as $post )
        <div class="tn-news">
            <div class="tn-img">
                <img src={{ $post->imagePosts->first()->path }} />
            </div>
            <div class="tn-title">
                <a href="">{{ $post->title }}</a>
            </div>
        </div>
    @endforeach

____________________
PopularNews
____________________
        1- In Home Controller
            $popular_posts = Post::withCount('comments')->with('comments')->limit(3)->orderBy('comments_count', 'desc')->get();
        2- In Index View
            <!-- Popular News -->
            <div id="popular" class="container tab-pane fade">
                @foreach ( $popular_posts as $post)
                    <div class="tn-news">
                        <div class="tn-img">
                            <img src={{$post->imagePosts->first()->path}} />
                        </div>
                        <div class="tn-title">
                            <a href="">{{ $post->title }}</a>
                            {{-- <p class="text-danger">{{ $post->comments->first()->value }}</a> --}}
                        </div>
                    </div>
                @endforeach
            </div>
____________________
all category with 5 posts only
____________________ 
    1- In Home Controller
        $categories_with_posts = Category::with(['posts' => function ($query) {
            $query->limit(4);
        }])->get();
    2- In Index View
            @foreach ( $categories as $category )
                    <div class="col-md-6">
                        <h2>{{ $category->name }}</h2>
                        <div class="row cn-slider">
                            @foreach ( $category->posts as $post)
                                <div class="col-md-6">
                                    <div class="cn-img">
                                        <img src="{{ $post->imagePosts->first()->path }}" />
                                        <div class="cn-title">
                                            <a href=""> {{ $post->title }} </a>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    </div>
                @endforeach
____________________
Read More
____________________
    - From cash in memory (speed) / not from database
    - by default laravel use in caching 
        .env   ->> CACHE_Driver=file # storage/framework/cache/
        
    - laravel Supported drivers: "array", "database", "file", "memcached", "redis", "dynamodb", "octane", "null"
    - we will use radius
        https://github.com/microsoftarchive/redis/releases
            - download zip
            - extract and add it in program files 
            - open edit system enviroment variables
            - open environment system add to system variables 
                C:\Program Files\Redis\
            - new command line (redis-server) عشان يشتغل 
            او نزل البرنامج وخلاص وهوه هيشتغل دايما
    - عاوز بقي بمجرد ما يعمل رفريش للصفحه يجيب الحاجه من الكاش
    - Create CacheServiceProvider
        php artisan make:provider CacheServiceProvider
        الفكره بقي اني هجيب 10 بوستات من الداتابيز واعملهم كاشينج 
        ولو مسحت البوستات من الداتا بيز لازم تبقي تعمل ابديت للكاش 
    - CacheServiceProvider extends ServiceProvider
        - boot(): void
            1- get data from Database
                if(!Cache::has('read_more_posts')){
                    $read_more_posts = Post::select('id', 'title')->latest()->get();
                    Cache::remember('read_more_posts', 3600 , function() use( $read_more_posts ){ # key, time in second, callback
                        return $read_more_posts;
                    });
                }
            2- get data from cache
                $read_more_posts = Cache::get('read_more_posts'); 
            3- send data to view
                view()->share([
                    'read_more_posts'=> $read_more_posts,
                ]); 
    - to clear CaChe
        // Cache::forget('read_more_posts');
____________________
Setting Dynamic
____________________
    1- Share Setting Data in all views
        - CheckSettingProvider
            - boot()
                $settings = Setting::firstOr(function(){
                    return Setting::create([
                        'site_name' => 'News',
                        'email' => 'mai.belal2127@gmail.com',
                        'phone' => '01019063522',
                        'favicon' => 'logo.jpg',
                        'logo' => 'logo.jpg',
                        'facebook' => 'https://www.facebook.com',
                        'twitter' => 'https://www.twitter.com',
                        'youtube' => 'https://www.youtube.com',
                        'city' => 'Egypt',
                        'country' => 'Cairo',
                        'street' => '123 News Street'
                    ]);            
                });
                view()->share([ 'settings' => $settings ]);
    2- In Footer and Header View
        <p><i class="fas fa-envelope"></i>{{ $settings->email }}</p>
        <p><i class="fas fa-phone-alt"></i>{{ $settings->phone }}</p>
        <a href="{{ $settings->twitter }}" title="twitter"><i class="fab fa-twitter"></i></a>
        <a href="{{ $settings->facebook }}" title="facebook"><i class="fab fa-facebook-f"></i></a>
        <a href="{{ $settings->youtube }}" title="youtube"><i class="fab fa-youtube"></i></a>

    3- For SEO 
        any href must be have title
____________________
Useful Links  لينكات هيضقها الادمن ليها 
____________________
        1- php artisan make:migration create_related_sites_table
            - In migration table   
                $table->id();
                $table->string('name');
                $table->string('url');
                $table->boolean('status')->default(1);
                $table->timestamps();
            - php artisan migrate
        2- php artisan make:model RelatedSite
            - In RelatedSite Model
                protected $fillable = [
                    'name',
                    'url',
                    'status',
                ];
        3- php artisan make:seeder RelatedSiteSeeder
            هنعمل فكره جديد اننا منحتاجش لfactory
            - In RelatedSiteSeeder
                - use Faker\Factory;
                - RelatedSiteSeeder
                    - run()
                        $faker = Factory::create(); # instance
                        for( $i = 0; $i < 5; $i++){
                            RelatedSite::create([
                                'name' => $faker->sentence(1),
                                'url' => $faker->url()
                            ]);
                        }
        4- Add RelatedSiteSeeder in DatabaseSeeder
            - run()
                 $this->call([
                    RelatedSiteSeeder::class,
                 ])
            - php artisan db:seed --class=RelatedSiteSeeder
        5- php artisan make:provider SharedDataServiceProvider
                $related_sites = RelatedSite::select('name','url')->get();
                    view()->share([
                        'related_links' => $related_sites
                    ]);
        6- In Footer View
                @foreach ($related_sites as $site)
                    <li><a href="{{ $site->url }}" title="{{ $site->name }}"> {{ $site->name }} </a></li>
                 @endforeach

____________________
News Subscriber  لينكات هيضقها الادمن ليها 
____________________
        1- php artisan make:model NewsSubscriber -m (model, table)
            - In migration table   
                $table->id();
                $table->string('email')->unique();
                $table->timestamps();
            - php artisan migrate

        2- In NewsSubscriber Model
                protected $fillable = [
                    'email',
                ];
        3- php artisan make:controller frontend/NewsSubscriberController 
        4- In web.php
            Route::group(['prefix' => '/home', 'as' => 'home.'], function () {
                Route::get('/', [HomeController::class, 'index'])->name('index');
                Route::post('/news-subscriber', [NewsSubscriberController::class, 'store'])->name('news.subscriber');
                Route::get('contact', [ContactController::class, 'index'])->name('contact');
                Route::get('terms', [TermsController::class, 'index'])->name('terms');
                Route::get('privacy', [PrivacyController::class, 'index'])->name('privacy');
                Route::get('about', [AboutController::class, 'index'])->name('about');
            });
        5- In Footer View
                NewsLetter
                <form action={{ route('home.news.subscriber')}} method="post">
                    @csrf
                    <input name="name" class="form-control" type="email" placeholder="Your email here" />
                    <button class="btn">Submit</button>
                </form>
        6- In Controller
            - store(NewsSubscriberRequest $request)
                $validated_subscriber = $request->validated();
                $NewsSubscriber = NewsSubscriber::create([ 'email'=> $validated_subscriber['email'] ]);
                - Handel Errors By https://github.com/php-flasher/flasher-laravel
                    if(!$NewsSubscriber){ # مشكله في الاتصال بالداتابيز
                        flash()->error('Sorry Try Again Later!');
                    }
                    flash()->success('Operation completed successfully!');
                    return redirect()->back();

                - Handel Validation Errors
                    <input name="email" class="form-control" type="email" placeholder="Your email here" />
                    @error('email')
                        <div class="text-danger"> {{ $message }} </div>
                    @enderror

        7- Install PHPFlasher Laravel Adapter Package Steps
            composer require php-flasher/flasher-laravel
            php artisan flasher:install
            php artisan flasher:install --config
        8- I need to send mail to user that suscribes the news website
            - use mail trap
            - .env
                # Looking to send emails in production? Check out our Email API/SMTP product!
                MAIL_MAILER=smtp
                MAIL_HOST=smtp.mailtrap.io
                MAIL_PORT=587
                MAIL_USERNAME=d73775345c668d
                MAIL_PASSWORD=ce5ab192da04c6
                MAIL_ENCRYPTION=tls
                MAIL_FROM_ADDRESS="News@example.com"
                MAIL_FROM_NAME="News Website"

            
            - php artisan make:mail frontend/NewSubscriberMail هفصل الايميلات
            - php artisan make:mail frontend/NewSubscriberMail --markdown=foldername.file-blade-name هيعمل كمان ال view
            - Send Mail in HomeController
                Mail::to($validated_subscriber['email'])->send(new NewsSubscriberMail());

            - add in news-subscriber view
                <x-mail::message>
                # Introduction

                Thanks For Subscribe.

                <x-mail::button :url="route('home.index')">
                    visit News Website
                </x-mail::button>

                Thanks,<br>
                {{ config('app.name') }}
                </x-mail::message>


____________________
Show Category in navbar
____________________
    - SharedDataServiceProvider.php 
        - boot()
            $related_sites = RelatedSite::select('name','url')->get();
            $categories = Category::select('id','name')->get();

            view()->share([
                'related_sites' => $related_sites,
                'categories' => $categories
            ]);
    - Note:
        - /** For naming parameters anything you prefer but I think its good if you
        * name it the same as their model. 
        * The `scopeBindings` method will tell if the buyer is connected to the company.
        * Take note that the parameter name must be the same of parameters from the
        * route so that the route-model binding will be applied. You don't need to add
        * a condition to check if the id exist from the database since it will
        * automatically return a 404 status code if the id do not exist
        */
    - In Web.php
        Route::get('about', [AboutController::class, 'index'])->name('about');
    - In views\frontend\category\show.blade.php
        <div class="dropdown-menu">
            @foreach ( $categories as $category)
                <a href="{{route('home.category.show', $category->slug)}}" class="dropdown-item">{{ $category->name }}</a>
            @endforeach
        </div>
    - php artisan make:controller frontend/CategoryController --invokable
    - In Controllers\Frontend\CategoryController.php
        - __invoke(Category $category)
            $category_by_slug  = Category::whereSlug($category->slug)->first();
            $posts = $category_by_slug->posts()->paginate(9);  // Paginate the posts separately
            return view('frontend.category.show', compact('category_by_slug', 'posts'));
    - in show blade
        @forelse( $posts as $post)
            <div class="col-md-4">
                <div class="mn-img">
                    <img src="{{ $post->imagePosts->first()->path }}" />
                    <div class="mn-title">
                        <a href="" title="{{ $post->title }}">{{ $post->title }}</a>
                    </div>
                </div>
            </div>
        @empty
        <div class="col-md-12">
            <div class="alert-info text-center p-5">
                No Posts Yet !!!
            </div>
        </div>
        @endforelse
        <div class="col-md-12">
            {{ $posts->links() }}  
        </div>
    - Styling paginate links
        /* Customizing pagination button colors */
        .pagination .page-item .page-link {
        background-color: #000000; /* Button background color */
        color: white; /* Button text color */
        }

        .pagination .page-item .page-link:hover {
        background-color: #bb9b5e;; /* Hover background color */
        color: white; /* Hover text color */
        box-shadow: 0 4px 8px #bb9b5e; /* Box shadow with color */
        border-color: #bb9b5e;
        }

        .pagination .page-item.active .page-link {
        background-color: #bb9b5e;; /* Active page button color */
        color: white; /* Active page text color */
        box-shadow:  0 4px 8px #bb9b5e; /* Box shadow with color */
        border-color: #bb9b5e;
        }


____________________
Show Category
____________________
    - php artisan make:controller frontend/PostController --resource
        Route::resource('posts', PostController::class)->except(['show']);
        Route::get('/posts/{post:slug}', [PostController::class, 'show'])->name('post.show');
    - IndexBlade 
        <a href="{{ route('home.posts.show', $post->slug) }}">
    - PostController
        $post_by_slug = Post::whereSlug($post->slug)->with('comments', 'imagePosts')->first();
        return view('frontend.post.show', compact('post_by_slug'));
____________________
Show Post
____________________
    1- web.php
        Route::resource('posts', PostController::class)->except(['show']);
        Route::get('/posts/{post:slug}', [PostController::class, 'show'])->name('post.show');

    2- Controller
        - show(Post $post)
            $post_by_slug = $post->with([
                        'comments' => function($query) {
                            $query->latest()->limit(3);  // حدّ من عدد التعليقات إلى 3 فقط
                        }, 
                        'imagePosts',
                        'user'])
                        ->withCount('comments')
                        ->find($post->id);            
            $posts_of_category = Post::where('category_id' , $post_by_slug->category->id)->select('id', 'slug', 'title')->limit(5)->get();
            return view('frontend.post.show', compact('post_by_slug','posts_of_category'));

    3- Blade
        - substr($post_by_slug->description, 0, 80)
        - active for first image
            <div class="col-lg-8">
                <!-- Carousel -->
                <div id="newsCarousel" class="carousel slide" data-ride="carousel">
                    <ol class="carousel-indicators">
                        @foreach ( $post_by_slug->imagePosts as $index => $image ) 
                            <li data-target="#newsCarousel" data-slide-to="{{ $index }}" class="@if($index == 0) active  @endif"></li>
                        @endforeach
                    </ol>
                    <div class="carousel-inner">
                        @foreach ( $post_by_slug->imagePosts as $index => $image )
                            <div class="carousel-item @if($index == 0) active  @endif">
                                <img src={{ $image->path }} class="d-block w-100"
                                alt="First Slide">

                                <div class="carousel-caption d-none d-md-block">
                                    <h5> {{ $post_by_slug->title }}</h5>
                                    <p>
                                        {{ substr($post_by_slug->description, 0, 80) }}
                                    </p>
                                </div>
                            </div>
                        @endforeach

                    </div>
                    <a class="carousel-control-prev" href="#newsCarousel" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#newsCarousel" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <div class="sn-content">
                    Breaking News: {{ $post_by_slug->title }} </br>
                    Date: {{ $post_by_slug->created_at }} </br> </br>
                    {{ $post_by_slug->description }}
                </div>
            </div>
    4- Comments
        @php
            $latest_three_comments = $post_by_slug->comments->take(3);
        @endphp
        _____________________________________
        او اني اعمل شرط ع العلاقه 
        _____________________________________

        $post_by_slug = Post::whereSlug($post->slug)
            ->with(['comments' => function($query){
                $query->limit(3);
            }], 
            'imagePosts', 
            'user')
            ->first();

        <!-- Display Comments -->
        <div class="comments">
            @foreach ( $latest_three_comments as $comment )
                <div class="comment">
                    <img src={{ Storage::url('images/'). $comment->user->image }} alt="User Image"
                        class="comment-img" />
                    <div class="comment-content">
                        <span class="username">{{ $comment->user->user_name }}</span>
                        <p class="comment-text">{{ $comment->value }}</p>
                    </div>
                </div>
            @endforeach
            <!-- Add more comments here for demonstration -->
        </div>

    5- posts in the same category
        @foreach ( $posts_of_category as $post) 
            <div class="nl-item">
                <div class="nl-img">
                    <img src={{ $post->imagePosts->first()->path }} />
                </div>
                <div class="nl-title">
                    <a href="">{{ $post->title }}</a>
                </div>
            </div>
        @endforeach
    6- latest_posts  
        - Providers\SharedDataServiceProvider.php
        - if(!Cache::has('latest_posts'))
                $latest_posts = Post::select('slug', 'title', 'created_at', 'id')->latest()->limit(5)->get();
                Cache::remember('latest_posts', 3600, function() use($latest_posts){
                    return $latest_posts;
                });

        $latest_posts = Cache::get('latest_posts');

        <div id="latest" class="container tab-pane fade">
            @foreach ($latest_posts as $post)
                <div class="tn-news">
                    <div class="tn-img">
                        <img src="{{ $post->imagePosts->first()->path }}" alt={{ $post->title }}/>
                    </div>
                    <div class="tn-title">
                        <a href="{{ route('home.posts.show', $post->slug) }}"
                            title="{{ $post->title }}">{{ $post->title }}</a>
                        <p class="" style="color: #63b59f">Date :(
                            {{ $post->created_at }} )</p>
                    </div>
                </div>  
            @endforeach
        </div>
    7- popular_posts
        - Providers\SharedDataServiceProvider.php
        - if(!Cache::has('popular_posts'))
            $popular_posts = Post::withCount('comments')->with('comments')->limit(3)->orderBy('comments_count', 'desc')->get();
            Cache::remember('popular_posts', 3600, function() use($popular_posts){
                return $popular_posts;
            });

        - $popular_posts =  Cache::get('popular_posts');

        - view()->share([
            'popular_posts' => $popular_posts ,
        ]);

_________________
Show Comments
_________________
    - by ajax request
    - First solution:-
        In parent blade ---> @yeild('js)
        In child blade
                @section('js')
                    // code
                @endsection
                @section('js')
                    // override 
                @endsection
    - Second solution:-
        In parent blade ---> @stack('js)
        In child blade
                @push('js')
                    // code
                @endpush
                @push('js')
                    // add to another code
                @endpush
    - Route
        Route::get('/posts/comments/{post:slug}', [CommentController::class, 'show'])->name('post.comments.show');
    
    - resources\views\frontend\posts\show.blade.php
        <!-- Comment Section -->
        <div class="comment-section">
            <!-- Comment Input -->
            <div class="comment-input">
                <input type="text" placeholder="Add a comment..." id="commentBox" />
                <button id="addCommentBtn">Post</button>
            </div>

            <!-- Display Comments -->
            <div class="comments">
                @foreach ($post_by_slug->comments as $comment)
                    <div class="comment">
                        <img src={{ Storage::url('images/') . $comment->user->image }} alt="User Image"
                            class="comment-img" />
                        <div class="comment-content">
                            <span class="username">{{ $comment->user->user_name }}</span>
                            <p class="comment-text">{{ $comment->value }}</p>
                        </div>
                    </div>
                @endforeach
                <!-- Add more comments here for demonstration -->
            </div>

            <!-- Show More Button -->

            <button id="showMoreBtn" class="show-more-btn">
                Show more
            </button>
        

                <div class="p-3 text-center">
                     <span class=" comments-count" value="{{ $post_by_slug->comments_count }}"> Comments Number: (
                                    {{ $post_by_slug->comments_count }} )</span>
                </div>
        </div>

        <script>
            $(document).ready(function() {
                $('#showMoreBtn').on('click', function(event) {
                    event.preventDefault();
                    $.ajax({
                        url: "{{ route('home.posts.comments.show', $post_by_slug->slug) }}/",
                        type: 'GET',
                        success: function(response) {

                            // Access the response data
                            var commentsCount = response.post_comments_count;
                            var newComments = response.post_comments;
                            // مسح جميع التعليقات القديمة
                            $('.comments').empty();
                            $('.comments-count').text('Comments Number: (' + commentsCount + ')');
                            $('.comments-count').attr('value', commentsCount);

                            // Loop through the new comments and append them to the comments section
                            newComments.forEach(function(comment) {
                                var newCommentHtml = `
                                    <div class="comment" data-comment-id="${comment.id}">
                                        <img src="{{ Storage::url('images/') }}${comment.user.image}" alt="User Image" class="comment-img" />
                                        <div class="comment-content">
                                            <span class="username">${comment.user.user_name}</span>
                                            <p class="comment-text">${comment.value}</p>
                                        </div>
                                    </div>
                                `;
                                $('.comments').prepend(newCommentHtml);
                                $('#showMoreBtn').hide();
                            });
                        },
                        error: function(xhr, status, error) {
                            console.error("Error occurred: " + error);
                            alert("Failed to load new comments. Please try again later.");

                        },
                    });
            });
            })
        </script>
    
    - CommentController
        ملحوظه هنا انت مش محتاج تجيب البوست تاني هوه جاي اصلا في ال binding
        public function show(Post $post)
            $post_with_comments = $post->load(['comments' => function($query){
                $query->with(['user' => function($query){
                    $query->select('image', 'id', 'user_name');
                }]);
            }]);
            
            $post_comments = $post_with_comments->comments;
            $post_comments_count = $post_comments->count();

            return response()->json([
                'post_comments' => $post_comments,
                'post_comments_count' => $post_comments_count,
            ]);
_________________
Add Comment
_________________  
    - Add comment by ajax
        - Route::post('/posts/comments/add-comment', [CommentController::class, 'store'])->name('post.comments.store');
        - <form id="addComment">
            <div class="comment-input">
                @csrf
                <input name="value" type="text" placeholder="Add a comment..." id="commentBox"/>
                <input type="hidden" name="post_id" value="{{$post_by_slug->id}}">
                <input type="hidden" name="user_id" value=1>
                {{-- <input type="text" name="user_id" value={{ auth()->user()->id }} hidden/> --}}
                <button type="submit">Add Comment</button>
            </div>
          </form>

        - $(document).ready(function() {
            $('#addComment').on('submit', function(event){
                event.preventDefault();
                var formData = $(this).serialize();
                $.ajax({
                    url: "{{route('home.posts.comments.store')}}",
                    type: 'POST',
                    data: formData,
                    processData: false,
                    ContentType: false,
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    success: function(response) {
                        $('.comments').prepend( `
                                <div class="comment" data-comment-id="${response.data.id}">
                                    <img src="{{ Storage::url('images/') }}${response.data.user.image}" alt="User Image" class="comment-img" />
                                    <div class="comment-content">
                                        <span class="username">${response.data.user.user_name}</span>
                                        <p class="comment-text">${response.data.value}</p>
                                    </div>
                                </div>
                            `);
                        var commentCountText = $('.comments-count').text();
                        var currentCommentCount = parseInt(commentCountText.replace(/[^\d]/g, '')); // Extract the number from the text

                        // Increment the count and update the text
                        $('.comments-count').text('Comments Number: (' + (currentCommentCount + 1) + ')');
                    
                    },
                    error: function(xhr, status, error) {
                        console.error("Error occurred: " + error);
                        alert("Failed to load new comments. Please try again later.");
                    },

                });
            })
        })
_________________
Contact Us
_________________ 
- web.php
    Route::get('contact-us', [ContactController::class, 'index'])->name('contact.index');
    Route::post('contact-us/store', [ContactController::class, 'store'])->name('contact.store');

- ContactController extends Controller
    - index()
        return view('frontend.contact');
    - store(ContactStoreRequest $request)
        $request->validated();
        $request->merge([
            'ip_address' => $request->ip()
        ]);
        $contact = Contact::create($request->except('_token'));
        if(!$contact){
            flash()->error('Faild Operation!');
        }
        flash()->success('Operation completed successfully!');
        return redirect()->back();
_________________
BreadCrumb
_________________ 
- User experience, تتابع الصفحات ,SEO
- In app.blade.php
    <!-- Breadcrumb Start -->
        <div class="breadcrumb-wrap">
            <div class="container">
                <ul class="breadcrumb">
                    @section('breadcrumb')
                        <li class="breadcrumb-item"><a href="{{ route('home.index') }}">Home</a></li>
                    @show
                </ul>
            </div>
        </div>
        <!-- Breadcrumb End -->

- In index.blade.php
    @section('breadcrumb')
        @parent
    @endsection
- In category.blade.php
    @section('breadcrumb')
        @parent
        <li class="breadcrumb-item active">{{ $category_by_slug->name }}</li>
    @endsection
    وهكذا في كل الصفحات
_________________
Route handling
_________________ 
Route::group(['prefix' => '/home', 'as' => 'home.'], function () {
    Route::get('/', [HomeController::class, 'index'])->name('index');
    Route::post('/news-subscriber', [NewsSubscriberController::class, 'store'])->name('news.subscriber');
    Route::get('terms', [TermsController::class, 'index'])->name('terms');
    Route::get('privacy', [PrivacyController::class, 'index'])->name('privacy');
    Route::get('about', [AboutController::class, 'index'])->name('about');

    Route::get('show-category/{category:slug}', [CategoryController::class, '__invoke'])->name('category.show');
    
    Route::group(['prefix'=> '/posts', 'as'=> 'posts.'],function () {
        Route::resource('/', PostController::class)->except(['show']);
        Route::get('/{post:slug}', [PostController::class, 'show'])->name('show');
        Route::group(['prefix'=> '/comments', 'as'=> 'comments.'],function(){
            Route::get('/{post:slug}', [CommentController::class, 'show'])->name('show');
            Route::post('/add-comment', [CommentController::class, 'store'])->name('store');
        });
    });
    Route::group(['prefix'=> '/contact-us', 'as'=> 'contact.'],function(){
        Route::get('/', [ContactController::class, 'index'])->name('index');
        Route::post('/store', [ContactController::class, 'store'])->name('store');
    });
});

_________________
Web searching
_________________ 
- views\frontend\search.blade.php
    @extends('layouts.frontend.app')
    @section('header')
        @include('layouts.frontend.header')
    @endsection
    @section('breadcrumb')
        @parent
    @endsection
    @section('content')
        <!-- Main News Start-->
        <div class="main-news">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="row">
                            {{-- // all posts --}}
                            @foreach ($posts as $post)
                                <div class="col-md-4">
                                    <div class="mn-img">
                                        <img src="{{ $post->imagePosts->first()->path }}" />
                                        {{-- <img src="{{ Storage::url('images/' . $post->imagePosts->first()->name)}}" /> --}}
                                        <div class="mn-title">
                                            <a href="{{ route('home.posts.show', $post->slug) }}" title="{{ $post->title }}">{{ $post->title }}</a>
                                        </div>
                                    </div>
                                </div>
                            @endforeach
                            <div class="col-md-12">
                                {{ $posts->links() }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Main News End-->
    @endsection

    @section('footer')
        @include('layouts.frontend.footer')
    @endsection

- SearchController.php
    - __invoke(Request $request)
         $posts = Post::where('title', 'LIKE', '%'.$request->search.'%')
                    ->orWhere('description', 'LIKE', '%'.$request->search.'%')
                    ->with('imagePosts')
                    ->latest()
                    ->paginate(9);
        return view('frontend.search', compact('posts'));
- Route
    Route::match(['get', 'post'] ,'/search', SearchController::class)->name('search');
- header.blade.php
    <div class="col-lg-3 col-md-4">
        <form action={{ route('home.search') }} method="POST">
            @csrf
            <div class="b-search">
                <input name="search" type="text" placeholder="Search" />
                <button type="submit"><i class="fa fa-search"></i></button>
            </div>
        </form>
    </div>
- لو انا بعت اسكربت او كود ضار رايح ع الداتا بيز لازم اهندل حنه السكيوريتي
    -In search input ---> <script>llll</script>
    $request->validate([
            'search'=> ['nullable', 'string', 'max:100']
    ]);
    $data_search = strip_tags($request->search);


_________________
Scope قيود معينه بطبقها علي الكويري
_________________ 
    - Local -> optional متاح تستخدمه أو لا ... استدعيه وقت ما تحتاجه 
    - Global -> هيطبق علي الكل حتي لو مستدعتوش
    - EX 
        - Show posts only active.
    - write scope in model
        public function scopeActive($query){
            $query->where('status', 1);
        }
    - call it in controller
        Controllers\Frontend\PostController.php
        Controllers\Frontend\HomeController.php
        Controllers\Frontend\SearchController.php
        CacheServiceProvider.php
        SharedDataServiceProvider.php
        
            Post::active()->....
            $post->active()->....
_____________________________________
Multiguard Authentication
_____________________________________
- config\auth.php
    - by default laravel 
        'guards' => [
            'web' => [
                'driver' => 'session', // store in session
                'provider' => 'users', // model users
            ],
        ],
    - Auth facade by default web --> مش بحتاج احدد الجارد
        $user = auth()->user(); 
        $admin = auth()->guard('admin')->user();
    - why install node?
        @vite(['resources/css/app.css', 'resources/js/app.js']) 
        هتشغل الملفات دي وكمان بتعمل updateبدون رفريش 
    - install node js
        -   downlood node.js
        -   npm install
        -   npm run dev
    - download package breeze
    - handle layout
        - Auth\RegisteredUserController.php
        - $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'user_name' =>['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'phone' => ['required','regex:/(01)[0-9]{9}/', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
            'country' => ['nullable', 'string', 'max:50'],
            'city' => ['nullable', 'string', 'max:50'],
            'street' => ['nullable', 'string', 'max:50'],
            'image' => ['required', 'image', 'mimes:jpg,jpeg,png,gif', 'max:2048'], // kilobyte
        ]);
        
        $user = User::create([
            'name' => $request->name,
            'user_name' => $request->user_name,
            'email' => $request->email,
            'phone' => $request->phone,
            'country' => $request->country,
            'city' => $request->city,
            'street' => $request->street,
            'image' => $imagePath,
            'password' => Hash::make($request->password),
        ]);
_____________________________________
MultiMedia Deals
_____________________________________
    - <form enctype="multipart/form-data">
    - Auth\RegisteredUserController.php
        


- First way
    $imagePath = $request->file('image')->store('images', 'public'); 
        - Create fake name automatic in desk public. 
        - Add it in storage\app\public\images\iPS7NRFlKpooCLVWHxRY1RZmRHW4cMQlk1nwpqnO.jpg
        - هضطر انك تعمل منها الصور دي shortcut بره عشان تعرف تعرضها
    
    Example:
        - Let’s say the user uploads profile.jpg. After this line runs, Laravel might:
        - Rename it to something unique (like Hf8U12j.jpg)
        - Store it at: storage/app/public/images/Hf8U12j.jpg
        - Return: 'images/Hf8U12j.jpg'
        - And we can use it:
            <img src="{{ asset('storage/' . $imagePath) }}">
- Second way
        - 
            $imagePath = null;
            if ($request->hasFile('image'))
                $imageName = Str::slug($request->user_name).time().".".$request->image->getOriginalExtension();
                $imagePath = $request->file('image')->storeAs('images/users', $imageName, 'public');

        - create a new desk in config\filesystems.php
            add in desks 
            'uploads' => [
                'driver' => 'local',
                'root' => puplic_path('/'),   # add in public directely
                'url' => env('APP_URL').'/',  # from controller
                'visibility' => 'public',
                'throw' => false,
            ]
        - if ($request->hasFile('image'))
                $imageName = Str::slug($request->user_name).time().".".$request->image->getOriginalExtension();
                $imagePath = $request->file('image')->storeAs('uploads/images/users', $imageName, ['disk'=> 'uploads']);
                    --> Add it in News-WEB\public Not in News-WEB\storage\app\public\images
                $user->create([
                        'image' => $imageName   
                            --> high performance 
                            --> <img src="{{asset('uploads/images/users'.auth()->user()->image)}}"> الاسيت بتعرفني انك داخل البابلك حط بقي المسار
                - OR 
                        'image' => $imagePath
                            --> <img src="{{asset(auth()->user()->image)}}">
                ]);
           